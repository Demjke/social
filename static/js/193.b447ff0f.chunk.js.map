{"version":3,"file":"static/js/193.b447ff0f.chunk.js","mappings":"uMACA,QAAwB,qBAAxB,EAAqD,qBAArD,EAAiF,oBAAjF,EAA6G,qBAA7G,EAA0I,qBAA1I,EAA0K,wBAA1K,EAA2M,sB,aCQ3M,MAYMA,GAAiBC,EAAAA,EAAAA,GAAU,CAAEC,KAAM,SAAlBD,EAZLE,IAAA,IAAC,aAAEC,EAAY,MAAEC,GAAOF,EAAA,OACtCG,EAAAA,EAAAA,MAAA,QAAMC,UAAWC,EAAcC,SAAUL,EAAaM,SAAA,EACjDC,EAAAA,EAAAA,IAAY,QAASH,EAAe,QAAS,CAACI,EAAAA,GAAWC,EAAAA,KACzDF,EAAAA,EAAAA,IAAY,WAAYH,EAAe,WAAY,CAACI,EAAAA,GAAWC,EAAAA,GAAO,CAAEC,KAAM,cAC/ER,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAcE,SAAA,EACzBC,EAAAA,EAAAA,IAAY,KAAMH,EAAkB,aAAc,KAAMK,EAAAA,GAAO,CAAEC,KAAM,aAAc,kBAEzFT,IAASU,EAAAA,EAAAA,KAAA,OAAKR,UAAWS,EAAAA,EAAMC,iBAAiBP,SAAEL,KACnDU,EAAAA,EAAAA,KAAA,UAAQR,UAAWC,EAAeE,SAAC,YAChC,IAoBX,GAAeQ,EAAAA,EAAAA,KAFSC,IAAK,CAAOC,OAAQD,EAAME,KAAKD,UAEf,CAAEE,MAAM,MAAhD,EAfcC,GAGNA,EAAMH,QAAeL,EAAAA,EAAAA,KAACS,EAAAA,GAAQ,CAACC,GAAI,cAGnCnB,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAcE,SAAA,EAC1BK,EAAAA,EAAAA,KAAA,MAAIR,UAAWC,EAAcE,SAAC,WAC9BK,EAAAA,EAAAA,KAACf,EAAc,CAACS,SAPPiB,GAAYH,EAAMD,MAAMI,EAASC,MAAOD,EAASE,SAAUF,EAASG,kB,sFCrBlF,MAAMC,EAAc3B,IAA6C,IAA1C4B,MAAM,QAAEC,EAAO,MAAE3B,GAAO,SAAEK,GAAUP,EAC9D,MAAM8B,EAAWD,GAAW3B,EAE5B,OACIC,EAAAA,EAAAA,MAAA,OAAKC,UAAW2B,EAAAA,EAAOC,YAAc,KAAOF,EAAWC,EAAAA,EAAO7B,MAAQ,IAAIK,SAAA,EACtEK,EAAAA,EAAAA,KAAA,OAAAL,SAAMA,IACLuB,IAAYlB,EAAAA,EAAAA,KAAA,QAAAL,SAAOL,MAClB,EAID+B,EAAWb,IACpB,MAAM,MAAEc,EAAK,KAAEN,EAAI,MAAEO,KAAUC,GAAchB,EAC7C,OACIR,EAAAA,EAAAA,KAACe,EAAW,IAAKP,EAAKb,UAClBK,EAAAA,EAAAA,KAAA,eAAcsB,KAAWE,KACf,EAIT1B,EAAQU,IACjB,MAAM,MAAEc,EAAK,KAAEN,EAAI,MAAEO,KAAUC,GAAchB,EAC7C,OACIR,EAAAA,EAAAA,KAACe,EAAW,IAAKP,EAAKb,UAClBK,EAAAA,EAAAA,KAAA,YAAWsB,KAAWE,KACZ,EAIT5B,EAAc,SAAC6B,EAAajC,EAAWkC,EAAMC,EAAYC,GAAS,IAAEpB,EAAKqB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAAC,OACvF7B,EAAAA,EAAAA,KAACgC,EAAAA,EAAK,CACFxC,UAAWA,EACXiC,YAAaA,EACbG,UAAWA,EACXF,KAAMA,EACNO,SAAUN,KACNnB,GACN,C,0CCxCC,MAAMX,EAAWqC,IACtB,IAAIA,EACJ,MAAO,mBAAmB,EAGfC,EAAmBC,GAAaF,IAC3C,GAAIA,EAAMJ,OAASM,EAAW,MAAO,iBAAiBA,WACtC,C,kCCNlB,SAAgB,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,wC","sources":["webpack://social/./src/components/Main/Login/Login.module.css?3d22","components/Main/Login/Login.jsx","components/common/FormsControls/FormsControls.jsx","utils/validators.js","webpack://social/./src/components/common/FormsControls/FormsControls.module.css?eb50"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"login\":\"Login_login__TsTCB\",\"title\":\"Login_title__WgL-b\",\"form\":\"Login_form__PA3qN\",\"input\":\"Login_input__CXWvr\",\"label\":\"Login_label__GOlWw\",\"checkbox\":\"Login_checkbox__wXHFU\",\"button\":\"Login_button__adGwp\"};","import { connect } from \"react-redux\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { reduxForm } from \"redux-form\";\r\nimport { login } from \"../../../store/auth-reducer\";\r\nimport { requared } from \"../../../utils/validators\";\r\nimport { createField, Input } from \"../../common/FormsControls/FormsControls\";\r\nimport style from \"../../common/FormsControls/FormsControls.module.css\";\r\nimport classes from \"./Login.module.css\";\r\n\r\nconst LoginForm = ({ handleSubmit, error }) => (\r\n    <form className={classes.form} onSubmit={handleSubmit}>\r\n        {createField(\"Email\", classes.input, \"email\", [requared], Input)}\r\n        {createField(\"Password\", classes.input, \"password\", [requared], Input, { type: \"password\" })}\r\n        <div className={classes.label}>\r\n            {createField(null, classes.checkbox, \"rememberMe\", null, Input, { type: \"checkbox\" })} remember me\r\n        </div>\r\n        {error && <div className={style.formSummaryError}>{error}</div>}\r\n        <button className={classes.button}>Login</button>\r\n    </form>\r\n);\r\n\r\nconst LoginReduxForm = reduxForm({ form: \"login\" })(LoginForm);\r\n\r\nconst Login = props => {\r\n    const onSubmit = formData => props.login(formData.email, formData.password, formData.rememberMe);\r\n\r\n    if (props.isAuth) return <Navigate to={\"/profile\"} />;\r\n\r\n    return (\r\n        <div className={classes.login}>\r\n            <h1 className={classes.title}>Login</h1>\r\n            <LoginReduxForm onSubmit={onSubmit} />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = state => ({ isAuth: state.auth.isAuth });\r\n\r\nexport default connect(mapStateToProps, { login })(Login);\r\n","import { Field } from \"redux-form\";\r\nimport styles from \"./FormsControls.module.css\";\r\n\r\nexport const FormControl = ({ meta: { touched, error }, children }) => {\r\n    const hasError = touched && error;\r\n\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>{children}</div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const Textarea = props => {\r\n    const { input, meta, child, ...restProps } = props;\r\n    return (\r\n        <FormControl {...props}>\r\n            <textarea {...input} {...restProps} />\r\n        </FormControl>\r\n    );\r\n};\r\n\r\nexport const Input = props => {\r\n    const { input, meta, child, ...restProps } = props;\r\n    return (\r\n        <FormControl {...props}>\r\n            <input {...input} {...restProps} />\r\n        </FormControl>\r\n    );\r\n};\r\n\r\nexport const createField = (placeholder, className, name, validators, component, props = {}) => (\r\n    <Field\r\n        className={className}\r\n        placeholder={placeholder}\r\n        component={component}\r\n        name={name}\r\n        validate={validators}\r\n        {...props}\r\n    />\r\n);\r\n","export const requared = value => {\r\n  if (value) return undefined;\r\n  return 'Field is requared';\r\n}\r\n\r\nexport const maxLengthCreator = maxLength => value => {\r\n  if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n  return undefined;\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__SyJgq\",\"error\":\"FormsControls_error__7rN9x\",\"formSummaryError\":\"FormsControls_formSummaryError__+3Qr8\"};"],"names":["LoginReduxForm","reduxForm","form","_ref","handleSubmit","error","_jsxs","className","classes","onSubmit","children","createField","requared","Input","type","_jsx","style","formSummaryError","connect","state","isAuth","auth","login","props","Navigate","to","formData","email","password","rememberMe","FormControl","meta","touched","hasError","styles","formControl","Textarea","input","child","restProps","placeholder","name","validators","component","arguments","length","undefined","Field","validate","value","maxLengthCreator","maxLength"],"sourceRoot":""}